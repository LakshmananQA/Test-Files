package Excersise;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Exer_1 {

	public static void main(String[] args) throws InterruptedException {
			// TODO Auto-generated method stub
		ChromeDriver driver = new ChromeDriver();
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

        try {
            driver.get("https://perfexcrm.com/demo/admin/authentication");

            // Switch to the reCAPTCHA iframe
            driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[title='reCAPTCHA']")));

            // Click on the "I'm not a robot" checkbox
            WebElement checkbox = driver.findElement(By.cssSelector(".recaptcha-checkbox-border"));
            checkbox.click();

            // Switch to the challenge iframe (if it appears)
            driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[title*='recaptcha challenge']")));

            // Locate the image grid tiles
            List<WebElement> tiles = driver.findElements(By.cssSelector(".rc-imageselect-tile"));

            // Use OpenCV to process each tile
            for (WebElement tile : tiles) {
                String imageUrl = tile.getCssValue("background-image").replace("url(", "").replace(")", "");
                boolean containsMotorcycle = analyzeImage(imageUrl); // Use OpenCV or another library
                if (containsMotorcycle) {
                    tile.click();
                }
            }

            // Click the verify button
            WebElement verifyButton = driver.findElement(By.id("recaptcha-verify-button"));
            verifyButton.click();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            driver.quit();
        }
    }

    // Pseudo function for image analysis
    public static boolean analyzeImage(String imageUrl) {
        // Use OpenCV or another library to analyze the image for motorcycles
        return false; // Return true if a motorcycle is detected
	    }
	}
