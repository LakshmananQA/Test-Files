<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Auth_button" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.${project.version}. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;136&quot;, &quot;Google Chrome&quot;;v=&quot;136&quot;, &quot;Not.A/Brand&quot;;v=&quot;99&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="DNT" elementType="Header">
            <stringProp name="Header.name">DNT</stringProp>
            <stringProp name="Header.value">1</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">api.simplita.ai</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">app.simplita.ai</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <intProp name="HTTPSampler.concurrentPool">6</intProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <collectionProp name="DNSCacheManager.hosts"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.duration">0</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/projects/createcard">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/projects/createcard</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;wer&quot;,&quot;status&quot;:&quot;active&quot;,&quot;user_id&quot;:&quot;3eafe303-e44b-4026-9f50-8707a475fbfa&quot;,&quot;created_at&quot;:&quot;2025-05-19T05:07:39.110Z&quot;,&quot;updated_at&quot;:&quot;2025-05-19T05:07:39.110Z&quot;,&quot;app_type&quot;:&quot;default&quot;,&quot;needs_auth&quot;:false,&quot;auth_type&quot;:&quot;none&quot;,&quot;description&quot;:&quot;Default project&quot;,&quot;storage_bucket&quot;:&quot;default&quot;,&quot;storage_path&quot;:&quot;default&quot;,&quot;files&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6IjlpWmxia2dBdGpuRlFCbGEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2tndnhpb3V2a3pndWd3a2prbXB3LnN1cGFiYXNlLmNvL2F1dGgvdjEiLCJzdWIiOiIzZWFmZTMwMy1lNDRiLTQwMjYtOWY1MC04NzA3YTQ3NWZiZmEiLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNzQ3NjM0ODE3LCJpYXQiOjE3NDc2MzEyMTcsImVtYWlsIjoibHVzaWZlckBnbWFpbC5jb20iLCJwaG9uZSI6IiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoibHVzaWZlckBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZnVsbF9uYW1lIjoiTHVzaWZlciIsInBob25lX3ZlcmlmaWVkIjpmYWxzZSwic3ViIjoiM2VhZmUzMDMtZTQ0Yi00MDI2LTlmNTAtODcwN2E0NzVmYmZhIn0sInJvbGUiOiJhdXRoZW50aWNhdGVkIiwiYWFsIjoiYWFsMSIsImFtciI6W3sibWV0aG9kIjoicGFzc3dvcmQiLCJ0aW1lc3RhbXAiOjE3NDc2MzEyMTd9XSwic2Vzc2lvbl9pZCI6IjNkZGFlNzMzLWU4ZWItNDA4OC05MTZlLTg3YzVjODg2NWZmZSIsImlzX2Fub255bW91cyI6ZmFsc2V9.LGxrncxo_ayxGYxFDyxbh1xW7qVN-hTCxTO9eP3GS7w</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/projects/user/3eafe303-e44b-4026-9f50-8707a475fbfa">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/projects/user/3eafe303-e44b-4026-9f50-8707a475fbfa</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6IjlpWmxia2dBdGpuRlFCbGEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2tndnhpb3V2a3pndWd3a2prbXB3LnN1cGFiYXNlLmNvL2F1dGgvdjEiLCJzdWIiOiIzZWFmZTMwMy1lNDRiLTQwMjYtOWY1MC04NzA3YTQ3NWZiZmEiLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNzQ3NjM0ODE3LCJpYXQiOjE3NDc2MzEyMTcsImVtYWlsIjoibHVzaWZlckBnbWFpbC5jb20iLCJwaG9uZSI6IiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoibHVzaWZlckBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZnVsbF9uYW1lIjoiTHVzaWZlciIsInBob25lX3ZlcmlmaWVkIjpmYWxzZSwic3ViIjoiM2VhZmUzMDMtZTQ0Yi00MDI2LTlmNTAtODcwN2E0NzVmYmZhIn0sInJvbGUiOiJhdXRoZW50aWNhdGVkIiwiYWFsIjoiYWFsMSIsImFtciI6W3sibWV0aG9kIjoicGFzc3dvcmQiLCJ0aW1lc3RhbXAiOjE3NDc2MzEyMTd9XSwic2Vzc2lvbl9pZCI6IjNkZGFlNzMzLWU4ZWItNDA4OC05MTZlLTg3YzVjODg2NWZmZSIsImlzX2Fub255bW91cyI6ZmFsc2V9.LGxrncxo_ayxGYxFDyxbh1xW7qVN-hTCxTO9eP3GS7w</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/projects/8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/projects/8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;status&quot;:&quot;active&quot;,&quot;app_type&quot;:&quot;HRM&quot;,&quot;needs_auth&quot;:true,&quot;auth_type&quot;:&quot;email&quot;,&quot;description&quot;:&quot;&quot;,&quot;updated_at&quot;:&quot;2025-05-19T05:07:40.025Z&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsImtpZCI6IjlpWmxia2dBdGpuRlFCbGEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2tndnhpb3V2a3pndWd3a2prbXB3LnN1cGFiYXNlLmNvL2F1dGgvdjEiLCJzdWIiOiIzZWFmZTMwMy1lNDRiLTQwMjYtOWY1MC04NzA3YTQ3NWZiZmEiLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNzQ3NjM0ODE3LCJpYXQiOjE3NDc2MzEyMTcsImVtYWlsIjoibHVzaWZlckBnbWFpbC5jb20iLCJwaG9uZSI6IiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoibHVzaWZlckBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZnVsbF9uYW1lIjoiTHVzaWZlciIsInBob25lX3ZlcmlmaWVkIjpmYWxzZSwic3ViIjoiM2VhZmUzMDMtZTQ0Yi00MDI2LTlmNTAtODcwN2E0NzVmYmZhIn0sInJvbGUiOiJhdXRoZW50aWNhdGVkIiwiYWFsIjoiYWFsMSIsImFtciI6W3sibWV0aG9kIjoicGFzc3dvcmQiLCJ0aW1lc3RhbXAiOjE3NDc2MzEyMTd9XSwic2Vzc2lvbl9pZCI6IjNkZGFlNzMzLWU4ZWItNDA4OC05MTZlLTg3YzVjODg2NWZmZSIsImlzX2Fub255bW91cyI6ZmFsc2V9.LGxrncxo_ayxGYxFDyxbh1xW7qVN-hTCxTO9eP3GS7w</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://app.simplita.ai/authentication?_rsc=znp18">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">authentication</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_rsc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_rsc</stringProp>
                  <stringProp name="Argument.value">znp18</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RSC" elementType="Header">
                  <stringProp name="Header.name">RSC</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Next-Router-Prefetch" elementType="Header">
                  <stringProp name="Header.name">Next-Router-Prefetch</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Next-Router-State-Tree" elementType="Header">
                  <stringProp name="Header.name">Next-Router-State-Tree</stringProp>
                  <stringProp name="Header.value">%5B%22%22%2C%7B%22children%22%3A%5B%22workspace%22%2C%7B%22children%22%3A%5B%22__PAGE__%22%2C%7B%7D%5D%7D%2Cnull%2Cnull%2Ctrue%5D%7D%2Cnull%2Cnull%2Ctrue%5D</stringProp>
                </elementProp>
                <elementProp name="Next-Url" elementType="Header">
                  <stringProp name="Header.name">Next-Url</stringProp>
                  <stringProp name="Header.value">/workspace</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://app.simplita.ai/authentication?_rsc=spdft" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">authentication</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_rsc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_rsc</stringProp>
                  <stringProp name="Argument.value">spdft</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RSC" elementType="Header">
                  <stringProp name="Header.name">RSC</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Next-Router-State-Tree" elementType="Header">
                  <stringProp name="Header.name">Next-Router-State-Tree</stringProp>
                  <stringProp name="Header.value">%5B%22%22%2C%7B%22children%22%3A%5B%22authentication%22%2C%7B%22children%22%3A%5B%22__PAGE__%22%2C%7B%7D%5D%7D%2Cnull%2C%22refetch%22%5D%7D%5D</stringProp>
                </elementProp>
                <elementProp name="Next-Url" elementType="Header">
                  <stringProp name="Header.name">Next-Url</stringProp>
                  <stringProp name="Header.value">/authentication</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/v1/authconfig/auth-providers/project/8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/v1/authconfig/auth-providers/project/8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/v1/authconfig/auth-providers/project/8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/v1/authconfig/auth-providers/project/8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://app.simplita.ai/__nextjs_original-stack-frame?isServer=false&amp;isEdgeServer=false&amp;isAppDirectory=true&amp;errorMessage=ReferenceError%3A+response+is+not+defined&amp;file=chrome-extension%3A%2F%2Fmbopgmdnpcbohhpnfglgohlbhfongabi%2Fsideex%2Fmonkey-patch.js&amp;methodName=%3Cunknown%3E&amp;arguments=&amp;lineNumber=75&amp;column=28" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">__nextjs_original-stack-frame</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="isServer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isServer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="file" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">file</stringProp>
                  <stringProp name="Argument.value">chrome-extension://mbopgmdnpcbohhpnfglgohlbhfongabi/sideex/monkey-patch.js</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isAppDirectory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isAppDirectory</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="errorMessage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">errorMessage</stringProp>
                  <stringProp name="Argument.value">ReferenceError: response is not defined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="column" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">column</stringProp>
                  <stringProp name="Argument.value">28</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="methodName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">methodName</stringProp>
                  <stringProp name="Argument.value">&lt;unknown&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="arguments" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">arguments</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lineNumber</stringProp>
                  <stringProp name="Argument.value">75</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isEdgeServer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isEdgeServer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://app.simplita.ai/__nextjs_original-stack-frame?isServer=false&amp;isEdgeServer=false&amp;isAppDirectory=true&amp;errorMessage=ReferenceError%3A+response+is+not+defined&amp;file=chrome-extension%3A%2F%2Fmbopgmdnpcbohhpnfglgohlbhfongabi%2Fsideex%2Fmonkey-patch.js&amp;methodName=%3Cunknown%3E&amp;arguments=&amp;lineNumber=75&amp;column=28" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">__nextjs_original-stack-frame</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="isServer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isServer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="file" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">file</stringProp>
                  <stringProp name="Argument.value">chrome-extension://mbopgmdnpcbohhpnfglgohlbhfongabi/sideex/monkey-patch.js</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isAppDirectory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isAppDirectory</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="errorMessage" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">errorMessage</stringProp>
                  <stringProp name="Argument.value">ReferenceError: response is not defined</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="column" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">column</stringProp>
                  <stringProp name="Argument.value">28</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="methodName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">methodName</stringProp>
                  <stringProp name="Argument.value">&lt;unknown&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="arguments" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">arguments</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lineNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lineNumber</stringProp>
                  <stringProp name="Argument.value">75</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isEdgeServer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isEdgeServer</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages?skip=0&amp;limit=100&amp;project_id=8c68c7e0-e065-434d-a43b-c03c2f0efb82" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project_id</stringProp>
                  <stringProp name="Argument.value">8c68c7e0-e065-434d-a43b-c03c2f0efb82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="skip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">skip</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.simplita.ai/api/layouts/pages" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">api/layouts/pages</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;signin&quot;,&quot;content&quot;:{&quot;canvas&quot;:{&quot;width&quot;:1200,&quot;height&quot;:800,&quot;backgroundColor&quot;:&quot;#ffffff&quot;},&quot;layoutId&quot;:&quot;id-9418cc002b7c4ae9b919a2081d55da57&quot;,&quot;components&quot;:[{&quot;id&quot;:&quot;id-72d1df50609f42c6ba019d3f90ec5a77&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;width&quot;:&quot;100%&quot;,&quot;height&quot;:&quot;100%&quot;,&quot;display&quot;:&quot;flex&quot;,&quot;padding&quot;:&quot;0&quot;,&quot;alignItems&quot;:&quot;center&quot;,&quot;justifyContent&quot;:&quot;center&quot;,&quot;backgroundColor&quot;:&quot;#ffffff&quot;},&quot;attributes&quot;:{&quot;role&quot;:&quot;authentication&quot;,&quot;page_type&quot;:&quot;authentication&quot;,&quot;page_identifier&quot;:&quot;signin_page&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-90af7e4a0bbd4d5c89343297500a9b48&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;width&quot;:&quot;100%&quot;,&quot;minHeight&quot;:&quot;100vh&quot;,&quot;display&quot;:&quot;flex&quot;,&quot;alignItems&quot;:&quot;center&quot;,&quot;justifyContent&quot;:&quot;center&quot;,&quot;padding&quot;:&quot;1rem&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-32ba437c432e4f7186be9eb34d2f4322&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;width&quot;:&quot;100%&quot;,&quot;maxWidth&quot;:&quot;28rem&quot;,&quot;backgroundColor&quot;:&quot;#ffffff&quot;,&quot;padding&quot;:&quot;1.5rem&quot;,&quot;borderRadius&quot;:&quot;0.5rem&quot;,&quot;boxShadow&quot;:&quot;0 1px 2px 0 rgba(0, 0, 0, 0.05)&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-62eb9a71a7d74b8fbf6ced4714dd94c4&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;textAlign&quot;:&quot;center&quot;,&quot;marginBottom&quot;:&quot;1.5rem&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-df823fc3646a4ab9baf0c6e63ce60878&quot;,&quot;type&quot;:&quot;h2&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;color&quot;:&quot;#111827&quot;,&quot;fontSize&quot;:&quot;1.25rem&quot;,&quot;fontWeight&quot;:&quot;600&quot;,&quot;marginBottom&quot;:&quot;0.25rem&quot;},&quot;content&quot;:&quot;Log In&quot;},{&quot;id&quot;:&quot;id-4e05dc02457b4da4bea7ac16f6612f5e&quot;,&quot;type&quot;:&quot;p&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;color&quot;:&quot;#4b5563&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;},&quot;content&quot;:&quot;Welcome back to My Application!&quot;}]},{&quot;id&quot;:&quot;id-54657ea19c4a45d2aec58152e2a34474&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;marginBottom&quot;:&quot;1rem&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-6734eeddae6141b7933423d82a7356ef&quot;,&quot;type&quot;:&quot;button&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;width&quot;:&quot;100%&quot;,&quot;backgroundColor&quot;:&quot;#ffffff&quot;,&quot;color&quot;:&quot;#1f2937&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;fontWeight&quot;:&quot;500&quot;,&quot;display&quot;:&quot;flex&quot;,&quot;alignItems&quot;:&quot;center&quot;,&quot;justifyContent&quot;:&quot;center&quot;,&quot;paddingTop&quot;:&quot;0.75rem&quot;,&quot;paddingBottom&quot;:&quot;0.75rem&quot;,&quot;paddingLeft&quot;:&quot;1rem&quot;,&quot;paddingRight&quot;:&quot;1rem&quot;,&quot;marginBottom&quot;:&quot;0.5rem&quot;,&quot;border&quot;:&quot;1px solid #e5e7eb&quot;,&quot;borderColor&quot;:&quot;#e5e7eb&quot;,&quot;borderRadius&quot;:&quot;0.375rem&quot;,&quot;transition&quot;:&quot;background-color 0.2s, border-color 0.2s, color 0.2s&quot;},&quot;attributes&quot;:{&quot;data-nav-initialized&quot;:&quot;true&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-64679633fa22418ab61d61b1d2b5fa64&quot;,&quot;type&quot;:&quot;svg&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;svg class=\&quot;w-5 h-5 mr-2\&quot; xmlns=\&quot;http://www.w3.org/2000/svg\&quot; viewBox=\&quot;0 0 24 24\&quot; fill=\&quot;none\&quot; stroke=\&quot;currentColor\&quot; stroke-width=\&quot;2\&quot; stroke-linecap=\&quot;round\&quot; stroke-linejoin=\&quot;round\&quot; xmlns:xlink=\&quot;http://www.w3.org/1999/xlink\&quot;&gt;\n          &lt;path d=\&quot;M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\&quot;&gt;&lt;/path&gt;\n        &lt;/svg&gt;&quot;,&quot;style&quot;:{&quot;width&quot;:&quot;1.25rem&quot;,&quot;height&quot;:&quot;1.25rem&quot;,&quot;marginRight&quot;:&quot;0.5rem&quot;},&quot;attributes&quot;:{&quot;xmlns&quot;:&quot;http://www.w3.org/2000/svg&quot;,&quot;viewBox&quot;:&quot;0 0 24 24&quot;,&quot;fill&quot;:&quot;none&quot;,&quot;stroke&quot;:&quot;currentColor&quot;,&quot;stroke-width&quot;:&quot;2&quot;,&quot;stroke-linecap&quot;:&quot;round&quot;,&quot;stroke-linejoin&quot;:&quot;round&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-2fdb9fec36f0404f8351239886f53919&quot;,&quot;type&quot;:&quot;path&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;path d=\&quot;M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\&quot;&gt;&lt;/path&gt;&quot;,&quot;attributes&quot;:{&quot;d&quot;:&quot;M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z&quot;}}]},{&quot;id&quot;:&quot;id-9e77ffe14e4d4d7fbaefd1370c9d1af5&quot;,&quot;type&quot;:&quot;span&quot;,&quot;isSvg&quot;:false,&quot;content&quot;:&quot;Continue With Phone Number&quot;}]},{&quot;id&quot;:&quot;id-f0c6a441ce974c82ae79731aef70b8c0&quot;,&quot;type&quot;:&quot;button&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;width&quot;:&quot;100%&quot;,&quot;backgroundColor&quot;:&quot;#ffffff&quot;,&quot;color&quot;:&quot;#1f2937&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;fontWeight&quot;:&quot;500&quot;,&quot;display&quot;:&quot;flex&quot;,&quot;alignItems&quot;:&quot;center&quot;,&quot;justifyContent&quot;:&quot;center&quot;,&quot;paddingTop&quot;:&quot;0.75rem&quot;,&quot;paddingBottom&quot;:&quot;0.75rem&quot;,&quot;paddingLeft&quot;:&quot;1rem&quot;,&quot;paddingRight&quot;:&quot;1rem&quot;,&quot;marginBottom&quot;:&quot;0.5rem&quot;,&quot;border&quot;:&quot;1px solid #e5e7eb&quot;,&quot;borderColor&quot;:&quot;#e5e7eb&quot;,&quot;borderRadius&quot;:&quot;0.375rem&quot;,&quot;transition&quot;:&quot;background-color 0.2s, border-color 0.2s, color 0.2s&quot;},&quot;attributes&quot;:{&quot;data-nav-initialized&quot;:&quot;true&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-cf247d54296740a78bade05f6a21c83f&quot;,&quot;type&quot;:&quot;svg&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;svg class=\&quot;w-5 h-5 mr-2\&quot; xmlns=\&quot;http://www.w3.org/2000/svg\&quot; viewBox=\&quot;0 0 24 24\&quot; fill=\&quot;none\&quot; stroke=\&quot;currentColor\&quot; stroke-width=\&quot;2\&quot; stroke-linecap=\&quot;round\&quot; stroke-linejoin=\&quot;round\&quot; xmlns:xlink=\&quot;http://www.w3.org/1999/xlink\&quot;&gt;\n          &lt;path d=\&quot;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\&quot;&gt;&lt;/path&gt;\n          &lt;path d=\&quot;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\&quot;&gt;&lt;/path&gt;\n        &lt;/svg&gt;&quot;,&quot;style&quot;:{&quot;width&quot;:&quot;1.25rem&quot;,&quot;height&quot;:&quot;1.25rem&quot;,&quot;marginRight&quot;:&quot;0.5rem&quot;},&quot;attributes&quot;:{&quot;xmlns&quot;:&quot;http://www.w3.org/2000/svg&quot;,&quot;viewBox&quot;:&quot;0 0 24 24&quot;,&quot;fill&quot;:&quot;none&quot;,&quot;stroke&quot;:&quot;currentColor&quot;,&quot;stroke-width&quot;:&quot;2&quot;,&quot;stroke-linecap&quot;:&quot;round&quot;,&quot;stroke-linejoin&quot;:&quot;round&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-3f785f5371854866bddd643e9610bd65&quot;,&quot;type&quot;:&quot;path&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;path d=\&quot;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\&quot;&gt;&lt;/path&gt;&quot;,&quot;attributes&quot;:{&quot;d&quot;:&quot;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&quot;}},{&quot;id&quot;:&quot;id-83a62757f2a84c27b0f5d5f84a81651d&quot;,&quot;type&quot;:&quot;path&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;path d=\&quot;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\&quot;&gt;&lt;/path&gt;&quot;,&quot;attributes&quot;:{&quot;d&quot;:&quot;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&quot;}}]},{&quot;id&quot;:&quot;id-53a7f5452d3d4b78a26fa2c90cc609c9&quot;,&quot;type&quot;:&quot;span&quot;,&quot;isSvg&quot;:false,&quot;content&quot;:&quot;Continue With Magic Link&quot;}]},{&quot;id&quot;:&quot;id-022fdea045214d9a94e52ebf3762717f&quot;,&quot;type&quot;:&quot;button&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;width&quot;:&quot;100%&quot;,&quot;backgroundColor&quot;:&quot;#ffffff&quot;,&quot;color&quot;:&quot;#1f2937&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;fontWeight&quot;:&quot;500&quot;,&quot;display&quot;:&quot;flex&quot;,&quot;alignItems&quot;:&quot;center&quot;,&quot;justifyContent&quot;:&quot;center&quot;,&quot;paddingTop&quot;:&quot;0.75rem&quot;,&quot;paddingBottom&quot;:&quot;0.75rem&quot;,&quot;paddingLeft&quot;:&quot;1rem&quot;,&quot;paddingRight&quot;:&quot;1rem&quot;,&quot;marginBottom&quot;:&quot;0.5rem&quot;,&quot;border&quot;:&quot;1px solid #e5e7eb&quot;,&quot;borderColor&quot;:&quot;#e5e7eb&quot;,&quot;borderRadius&quot;:&quot;0.375rem&quot;,&quot;transition&quot;:&quot;background-color 0.2s, border-color 0.2s, color 0.2s&quot;},&quot;attributes&quot;:{&quot;data-nav-initialized&quot;:&quot;true&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-0e60b7f011e84ecab12a4817eba8b2b1&quot;,&quot;type&quot;:&quot;svg&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;svg class=\&quot;w-5 h-5 mr-2\&quot; xmlns=\&quot;http://www.w3.org/2000/svg\&quot; viewBox=\&quot;0 0 24 24\&quot; xmlns:xlink=\&quot;http://www.w3.org/1999/xlink\&quot;&gt;\n          &lt;path d=\&quot;M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\&quot; fill=\&quot;#4285F4\&quot;&gt;&lt;/path&gt;\n          &lt;path d=\&quot;M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\&quot; fill=\&quot;#34A853\&quot;&gt;&lt;/path&gt;\n          &lt;path d=\&quot;M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\&quot; fill=\&quot;#FBBC05\&quot;&gt;&lt;/path&gt;\n          &lt;path d=\&quot;M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\&quot; fill=\&quot;#EA4335\&quot;&gt;&lt;/path&gt;\n        &lt;/svg&gt;&quot;,&quot;style&quot;:{&quot;width&quot;:&quot;1.25rem&quot;,&quot;height&quot;:&quot;1.25rem&quot;,&quot;marginRight&quot;:&quot;0.5rem&quot;},&quot;attributes&quot;:{&quot;xmlns&quot;:&quot;http://www.w3.org/2000/svg&quot;,&quot;viewBox&quot;:&quot;0 0 24 24&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-e88282d0a4b2488fb422c2e9e73ccaeb&quot;,&quot;type&quot;:&quot;path&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;path d=\&quot;M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\&quot; fill=\&quot;#4285F4\&quot;&gt;&lt;/path&gt;&quot;,&quot;attributes&quot;:{&quot;d&quot;:&quot;M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z&quot;,&quot;fill&quot;:&quot;#4285F4&quot;}},{&quot;id&quot;:&quot;id-b0dc1bb0841a4716b1659b847690abd4&quot;,&quot;type&quot;:&quot;path&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;path d=\&quot;M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\&quot; fill=\&quot;#34A853\&quot;&gt;&lt;/path&gt;&quot;,&quot;attributes&quot;:{&quot;d&quot;:&quot;M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z&quot;,&quot;fill&quot;:&quot;#34A853&quot;}},{&quot;id&quot;:&quot;id-8565846796284436b88b393b7b57e748&quot;,&quot;type&quot;:&quot;path&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;path d=\&quot;M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\&quot; fill=\&quot;#FBBC05\&quot;&gt;&lt;/path&gt;&quot;,&quot;attributes&quot;:{&quot;d&quot;:&quot;M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z&quot;,&quot;fill&quot;:&quot;#FBBC05&quot;}},{&quot;id&quot;:&quot;id-8bbfff8c522c442dbfc46d5d7abbadc6&quot;,&quot;type&quot;:&quot;path&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;path d=\&quot;M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\&quot; fill=\&quot;#EA4335\&quot;&gt;&lt;/path&gt;&quot;,&quot;attributes&quot;:{&quot;d&quot;:&quot;M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z&quot;,&quot;fill&quot;:&quot;#EA4335&quot;}}]},{&quot;id&quot;:&quot;id-bc93f6b4392f490ca37ec008cc4e7430&quot;,&quot;type&quot;:&quot;span&quot;,&quot;isSvg&quot;:false,&quot;content&quot;:&quot;Continue With Google&quot;}]},{&quot;id&quot;:&quot;id-b3b94d51ff8a44509fb820c30c1db151&quot;,&quot;type&quot;:&quot;button&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;width&quot;:&quot;100%&quot;,&quot;backgroundColor&quot;:&quot;#ffffff&quot;,&quot;color&quot;:&quot;#1f2937&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;fontWeight&quot;:&quot;500&quot;,&quot;display&quot;:&quot;flex&quot;,&quot;alignItems&quot;:&quot;center&quot;,&quot;justifyContent&quot;:&quot;center&quot;,&quot;paddingTop&quot;:&quot;0.75rem&quot;,&quot;paddingBottom&quot;:&quot;0.75rem&quot;,&quot;paddingLeft&quot;:&quot;1rem&quot;,&quot;paddingRight&quot;:&quot;1rem&quot;,&quot;marginBottom&quot;:&quot;0.5rem&quot;,&quot;border&quot;:&quot;1px solid #e5e7eb&quot;,&quot;borderColor&quot;:&quot;#e5e7eb&quot;,&quot;borderRadius&quot;:&quot;0.375rem&quot;,&quot;transition&quot;:&quot;background-color 0.2s, border-color 0.2s, color 0.2s&quot;},&quot;attributes&quot;:{&quot;data-nav-initialized&quot;:&quot;true&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-b88b03b288af4adeb460ccaff2d132d7&quot;,&quot;type&quot;:&quot;svg&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;svg class=\&quot;w-5 h-5 mr-2\&quot; xmlns=\&quot;http://www.w3.org/2000/svg\&quot; viewBox=\&quot;0 0 24 24\&quot; fill=\&quot;currentColor\&quot; xmlns:xlink=\&quot;http://www.w3.org/1999/xlink\&quot;&gt;\n          &lt;path fill-rule=\&quot;evenodd\&quot; clip-rule=\&quot;evenodd\&quot; d=\&quot;M12 2C6.477 2 2 6.477 2 12c0 4.42 2.87 8.17 6.84 9.5.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34-.46-1.16-1.11-1.47-1.11-1.47-.91-.62.07-.6.07-.6 1 .07 1.53 1.03 1.53 1.03.87 1.52 2.34 1.07 2.91.83.09-.65.35-1.09.63-1.34-2.22-.25-4.55-1.11-4.55-4.92 0-1.11.38-2 1.03-2.71-.1-.25-.45-1.29.1-2.64 0 0 .84-.27 2.75 1.02.79-.22 1.65-.33 2.5-.33.85 0 1.71.11 2.5.33 1.91-1.29 2.75-1.02 2.75-1.02.55 1.35.2 2.39.1 2.64.65.71 1.03 1.6 1.03 2.71 0 3.82-2.34 4.66-4.57 4.91.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0012 2z\&quot;&gt;&lt;/path&gt;\n        &lt;/svg&gt;&quot;,&quot;style&quot;:{&quot;width&quot;:&quot;1.25rem&quot;,&quot;height&quot;:&quot;1.25rem&quot;,&quot;marginRight&quot;:&quot;0.5rem&quot;},&quot;attributes&quot;:{&quot;xmlns&quot;:&quot;http://www.w3.org/2000/svg&quot;,&quot;viewBox&quot;:&quot;0 0 24 24&quot;,&quot;fill&quot;:&quot;currentColor&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-9e906acae7f74f95aa47b8d376c1987e&quot;,&quot;type&quot;:&quot;path&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;path fill-rule=\&quot;evenodd\&quot; clip-rule=\&quot;evenodd\&quot; d=\&quot;M12 2C6.477 2 2 6.477 2 12c0 4.42 2.87 8.17 6.84 9.5.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34-.46-1.16-1.11-1.47-1.11-1.47-.91-.62.07-.6.07-.6 1 .07 1.53 1.03 1.53 1.03.87 1.52 2.34 1.07 2.91.83.09-.65.35-1.09.63-1.34-2.22-.25-4.55-1.11-4.55-4.92 0-1.11.38-2 1.03-2.71-.1-.25-.45-1.29.1-2.64 0 0 .84-.27 2.75 1.02.79-.22 1.65-.33 2.5-.33.85 0 1.71.11 2.5.33 1.91-1.29 2.75-1.02 2.75-1.02.55 1.35.2 2.39.1 2.64.65.71 1.03 1.6 1.03 2.71 0 3.82-2.34 4.66-4.57 4.91.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0012 2z\&quot;&gt;&lt;/path&gt;&quot;,&quot;attributes&quot;:{&quot;fill-rule&quot;:&quot;evenodd&quot;,&quot;clip-rule&quot;:&quot;evenodd&quot;,&quot;d&quot;:&quot;M12 2C6.477 2 2 6.477 2 12c0 4.42 2.87 8.17 6.84 9.5.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34-.46-1.16-1.11-1.47-1.11-1.47-.91-.62.07-.6.07-.6 1 .07 1.53 1.03 1.53 1.03.87 1.52 2.34 1.07 2.91.83.09-.65.35-1.09.63-1.34-2.22-.25-4.55-1.11-4.55-4.92 0-1.11.38-2 1.03-2.71-.1-.25-.45-1.29.1-2.64 0 0 .84-.27 2.75 1.02.79-.22 1.65-.33 2.5-.33.85 0 1.71.11 2.5.33 1.91-1.29 2.75-1.02 2.75-1.02.55 1.35.2 2.39.1 2.64.65.71 1.03 1.6 1.03 2.71 0 3.82-2.34 4.66-4.57 4.91.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0012 2z&quot;}}]},{&quot;id&quot;:&quot;id-65d8a3987547434e8376bd9eaac7241f&quot;,&quot;type&quot;:&quot;span&quot;,&quot;isSvg&quot;:false,&quot;content&quot;:&quot;Continue With GitHub&quot;}]},{&quot;id&quot;:&quot;id-2d8fb523d45d4f41a5e46ae113c86831&quot;,&quot;type&quot;:&quot;button&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;width&quot;:&quot;100%&quot;,&quot;backgroundColor&quot;:&quot;#ffffff&quot;,&quot;color&quot;:&quot;#1f2937&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;fontWeight&quot;:&quot;500&quot;,&quot;display&quot;:&quot;flex&quot;,&quot;alignItems&quot;:&quot;center&quot;,&quot;justifyContent&quot;:&quot;center&quot;,&quot;paddingTop&quot;:&quot;0.75rem&quot;,&quot;paddingBottom&quot;:&quot;0.75rem&quot;,&quot;paddingLeft&quot;:&quot;1rem&quot;,&quot;paddingRight&quot;:&quot;1rem&quot;,&quot;marginBottom&quot;:&quot;0.5rem&quot;,&quot;border&quot;:&quot;1px solid #e5e7eb&quot;,&quot;borderColor&quot;:&quot;#e5e7eb&quot;,&quot;borderRadius&quot;:&quot;0.375rem&quot;,&quot;transition&quot;:&quot;background-color 0.2s, border-color 0.2s, color 0.2s&quot;},&quot;attributes&quot;:{&quot;data-nav-initialized&quot;:&quot;true&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-ba461d03ccc744dd9cb621ab19afd3a1&quot;,&quot;type&quot;:&quot;svg&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;svg class=\&quot;w-5 h-5 mr-2\&quot; xmlns=\&quot;http://www.w3.org/2000/svg\&quot; viewBox=\&quot;0 0 24 24\&quot; fill=\&quot;#0A66C2\&quot; xmlns:xlink=\&quot;http://www.w3.org/1999/xlink\&quot;&gt;\n          &lt;path d=\&quot;M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.454C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.225 0z\&quot; fill=\&quot;#0A66C2\&quot;&gt;&lt;/path&gt;\n        &lt;/svg&gt;&quot;,&quot;style&quot;:{&quot;width&quot;:&quot;1.25rem&quot;,&quot;height&quot;:&quot;1.25rem&quot;,&quot;marginRight&quot;:&quot;0.5rem&quot;},&quot;attributes&quot;:{&quot;xmlns&quot;:&quot;http://www.w3.org/2000/svg&quot;,&quot;viewBox&quot;:&quot;0 0 24 24&quot;,&quot;fill&quot;:&quot;#0A66C2&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-0e089b54924f40d28e63b524194a50db&quot;,&quot;type&quot;:&quot;path&quot;,&quot;isSvg&quot;:true,&quot;svgContent&quot;:&quot;&lt;path d=\&quot;M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.454C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.225 0z\&quot; fill=\&quot;#0A66C2\&quot;&gt;&lt;/path&gt;&quot;,&quot;attributes&quot;:{&quot;d&quot;:&quot;M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.454C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.225 0z&quot;,&quot;fill&quot;:&quot;#0A66C2&quot;}}]},{&quot;id&quot;:&quot;id-50c4bb34f5d446d380829277b098d43e&quot;,&quot;type&quot;:&quot;span&quot;,&quot;isSvg&quot;:false,&quot;content&quot;:&quot;Continue With LinkedIn&quot;}]}]},{&quot;id&quot;:&quot;id-cd056bcb98ed4394ab2ef5673dfa42db&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;display&quot;:&quot;flex&quot;,&quot;alignItems&quot;:&quot;center&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-f4043eff7beb4850a0ff30d386671a4e&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;backgroundColor&quot;:&quot;#e5e7eb&quot;,&quot;flexGrow&quot;:&quot;1&quot;}},{&quot;id&quot;:&quot;id-cdaca4d3b4a94e5683afc866006a6853&quot;,&quot;type&quot;:&quot;span&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;color&quot;:&quot;#6b7280&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;paddingLeft&quot;:&quot;0.75rem&quot;,&quot;paddingRight&quot;:&quot;0.75rem&quot;},&quot;content&quot;:&quot;OR&quot;},{&quot;id&quot;:&quot;id-09cb6aacaf5d4eec8478ff201915bf85&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;backgroundColor&quot;:&quot;#e5e7eb&quot;,&quot;flexGrow&quot;:&quot;1&quot;}}]},{&quot;id&quot;:&quot;id-3d92cfb2ff1a43b38f2102659f9e5b91&quot;,&quot;type&quot;:&quot;form&quot;,&quot;isSvg&quot;:false,&quot;attributes&quot;:{&quot;data-form-initialized&quot;:&quot;true&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-1d7d0d9535ef4600ac34202ba8755eac&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;marginBottom&quot;:&quot;1rem&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-a831b8b458e648dda941556486306d08&quot;,&quot;type&quot;:&quot;label&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;color&quot;:&quot;#374151&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;fontWeight&quot;:&quot;500&quot;,&quot;display&quot;:&quot;block&quot;,&quot;marginBottom&quot;:&quot;0.25rem&quot;},&quot;attributes&quot;:{&quot;for&quot;:&quot;email&quot;},&quot;content&quot;:&quot;Email &quot;},{&quot;id&quot;:&quot;id-488fc6a2255f4355aa82dfaf36662870&quot;,&quot;type&quot;:&quot;input&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;width&quot;:&quot;100%&quot;,&quot;color&quot;:&quot;#1f2937&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;paddingTop&quot;:&quot;0.5rem&quot;,&quot;paddingBottom&quot;:&quot;0.5rem&quot;,&quot;paddingLeft&quot;:&quot;0.75rem&quot;,&quot;paddingRight&quot;:&quot;0.75rem&quot;,&quot;border&quot;:&quot;1px solid #e5e7eb&quot;,&quot;borderColor&quot;:&quot;#e5e7eb&quot;,&quot;borderRadius&quot;:&quot;0.375rem&quot;,&quot;boxShadow&quot;:&quot;0 0 0 2px rgba(59, 130, 246, 0.5)&quot;,&quot;transition&quot;:&quot;border-color 0.2s, box-shadow 0.2s&quot;,&quot;outline&quot;:&quot;none&quot;},&quot;attributes&quot;:{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;email&quot;,&quot;placeholder&quot;:&quot;Enter your email or username&quot;,&quot;required&quot;:&quot;&quot;}}]},{&quot;id&quot;:&quot;id-fb4333e503cd4bd299fae4e6728dbc3b&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;marginBottom&quot;:&quot;1rem&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-3c3cf8c2c96a4925bf6a5abefaa7dcf8&quot;,&quot;type&quot;:&quot;label&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;color&quot;:&quot;#374151&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;fontWeight&quot;:&quot;500&quot;,&quot;display&quot;:&quot;block&quot;,&quot;marginBottom&quot;:&quot;0.25rem&quot;},&quot;attributes&quot;:{&quot;for&quot;:&quot;password&quot;},&quot;content&quot;:&quot;Password&quot;},{&quot;id&quot;:&quot;id-314dfc4a0ca049ca9175f76ef8fa7bd8&quot;,&quot;type&quot;:&quot;input&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;width&quot;:&quot;100%&quot;,&quot;color&quot;:&quot;#1f2937&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;paddingTop&quot;:&quot;0.5rem&quot;,&quot;paddingBottom&quot;:&quot;0.5rem&quot;,&quot;paddingLeft&quot;:&quot;0.75rem&quot;,&quot;paddingRight&quot;:&quot;0.75rem&quot;,&quot;border&quot;:&quot;1px solid #e5e7eb&quot;,&quot;borderColor&quot;:&quot;#e5e7eb&quot;,&quot;borderRadius&quot;:&quot;0.375rem&quot;,&quot;boxShadow&quot;:&quot;0 0 0 2px rgba(59, 130, 246, 0.5)&quot;,&quot;transition&quot;:&quot;border-color 0.2s, box-shadow 0.2s&quot;,&quot;outline&quot;:&quot;none&quot;},&quot;attributes&quot;:{&quot;type&quot;:&quot;password&quot;,&quot;id&quot;:&quot;password&quot;,&quot;placeholder&quot;:&quot;Enter your password&quot;,&quot;required&quot;:&quot;&quot;}}]},{&quot;id&quot;:&quot;id-30a5ca161538447e8f5ab6ee7e245c91&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;textAlign&quot;:&quot;right&quot;,&quot;marginBottom&quot;:&quot;1rem&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-08a4ab652ab147e59731b60c4c76a33c&quot;,&quot;type&quot;:&quot;a&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;color&quot;:&quot;#2563eb&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;},&quot;attributes&quot;:{&quot;href&quot;:&quot;/forgot-password&quot;,&quot;data-nav-initialized&quot;:&quot;true&quot;},&quot;content&quot;:&quot;Forgot password?&quot;}]},{&quot;id&quot;:&quot;id-9e13e5f9ff054f29b6bffab5f9dc0127&quot;,&quot;type&quot;:&quot;button&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;backgroundColor&quot;:&quot;#2563eb&quot;,&quot;width&quot;:&quot;100%&quot;,&quot;color&quot;:&quot;#ffffff&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;fontWeight&quot;:&quot;500&quot;,&quot;paddingTop&quot;:&quot;0.5rem&quot;,&quot;paddingBottom&quot;:&quot;0.5rem&quot;,&quot;paddingLeft&quot;:&quot;1rem&quot;,&quot;paddingRight&quot;:&quot;1rem&quot;,&quot;borderRadius&quot;:&quot;0.375rem&quot;,&quot;transition&quot;:&quot;background-color 0.2s, border-color 0.2s, color 0.2s&quot;},&quot;attributes&quot;:{&quot;type&quot;:&quot;submit&quot;,&quot;data-nav-initialized&quot;:&quot;true&quot;},&quot;content&quot;:&quot;Sign In&quot;}]},{&quot;id&quot;:&quot;id-905f12fee29847a89fd275d1fdd04b0d&quot;,&quot;type&quot;:&quot;div&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;color&quot;:&quot;#4b5563&quot;,&quot;fontSize&quot;:&quot;0.875rem&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;marginTop&quot;:&quot;1.5rem&quot;},&quot;components&quot;:[{&quot;id&quot;:&quot;id-fc6bb6dd71e14cb79d7ac20fb36efb65&quot;,&quot;type&quot;:&quot;a&quot;,&quot;isSvg&quot;:false,&quot;style&quot;:{&quot;color&quot;:&quot;#2563eb&quot;,&quot;fontWeight&quot;:&quot;500&quot;},&quot;attributes&quot;:{&quot;href&quot;:&quot;/signup&quot;,&quot;data-nav-initialized&quot;:&quot;true&quot;},&quot;content&quot;:&quot;Sign Up&quot;}]}]}]}],&quot;label&quot;:&quot;Signin&quot;,&quot;category&quot;:&quot;Authentication&quot;,&quot;script&quot;:{&quot;content&quot;:&quot;\n    // Common authentication functions\n    function simulateAuthRequest(action, data) {\n      return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n          console.log(`${action} request with data`, data);\n          resolve({ success: true });\n        }, 1000);\n      });\n    }\n  \n      async function handleLogin(event) {\n        event.preventDefault();\n        \n        const email = document.getElementById(&apos;email&apos;).value;\n        const password = document.getElementById(&apos;password&apos;).value;\n        \n        if (!email || !password) {\n          alert(&apos;Please fill in all fields&apos;);\n                        return;\n                    }\n        \n                    try {\n          const response = await simulateAuthRequest(&apos;login&apos;, { email, password });\n          if (response.success) {\n            alert(&apos;Login successful! Redirecting...&apos;);\n            // Redirect to dashboard/home page\n                        }\n                    } catch (error) {\n          alert(&apos;Login failed. Please try again.&apos;);\n        }\n      }\n      \n      // Add event listener to form\n      document.querySelector(&apos;form&apos;).addEventListener(&apos;submit&apos;, handleLogin);\n    &quot;}}],&quot;name&quot;:&quot;signin&quot;,&quot;project_id&quot;:&quot;8c68c7e0-e065-434d-a43b-c03c2f0efb82&quot;,&quot;slug&quot;:&quot;signin&quot;,&quot;sort_order&quot;:0,&quot;layout_id&quot;:null},&quot;project_id&quot;:&quot;8c68c7e0-e065-434d-a43b-c03c2f0efb82&quot;,&quot;is_template&quot;:true,&quot;id&quot;:&quot;signin&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
